#include <QCoreApplication>
#include <QImage>
#include <QDebug>

#include "bertalmioprocessing.h"

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    BertalmioProcessing bertalmioParts;

    const int M = 21;
    const int N = 17;
    const int A = 15;  // steps of inpainting with equation (4)
    const int B = 2;   // steps of diffusion with equation (3)
    const int T = 50;  // repetition of loops A, B (A*B*T = 15*2*50 = 1500 ===> 2.6 secs)
    const float dt = 0.5;

    float I[N][M] = {
        {0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0},
        {0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0},
        {0, 0, 1, 2, 3, 4, 5, 6, 7,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0},
        {0, 0, 1, 2, 3, 4, 5, 6, 7,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0},
        {0, 0, 1, 2, 3, 4, 5, 6,10,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0},
        {0, 0, 1, 2, 3, 4, 5, 6,10,10, 9, 8, 7, 6, 5, 4,10, 2, 1, 0, 0},
        {0, 0, 1, 2, 3, 4, 5,10,10, 8, 9, 8, 7, 6, 5,10,10, 2, 1, 0, 0},
        {0, 0, 1, 2, 3,10,10, 6,10,10,10,10,10,10,10,10,10,10, 1, 0, 0},
        {0, 0, 1, 2, 3,10,10, 6, 7, 8, 9, 8,10,10,10,10,10,10, 1, 0, 0},
        {0, 0, 1, 2,10,10, 5, 6, 7, 8, 9, 8, 7, 6,10,10,10, 2, 1, 0, 0},
        {0, 0,10,10, 3,10, 5, 6, 7, 8, 9, 8, 7, 6, 5,10, 3, 2, 1, 0, 0},
        {0, 0,10,10, 3,10, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4,10, 2, 1, 0, 0},
        {0, 0, 1, 2, 3,10, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4,10, 2, 1, 0, 0},
        {0, 0, 1, 2, 3,10, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0},
        {0, 0, 1, 2, 3,10, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0},
        {0, 0, 1, 2, 3,10, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0},
        {0, 0, 1, 2, 3,10, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0}
    };

    float mask[N][M] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0},
        {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
        {0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
        {0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    };

    float Inpainting[N][M];
    float beta[N][M];
    float mod_grad_mag[N][M];

    // Normalization
    for (int y = 0; y < N; y++)
        for (int x = 0; x < M; x++)
        {
            I[y][x] = I[y][x] / (float)10;
        }

    // Copy I to Inpainting
    for (int y = 0; y < N; y++)
        for (int x = 0; x < M; x++)
        {
            Inpainting[y][x] = I[y][x];
        }

    // Recomputation
    BertalmioProcessing::List2DFloat I_bert = bertalmioParts.array2DToFloat(I, N);
    BertalmioProcessing::IsophoteDirection IxIy_bert;

    for (int t = 0; t < T; t++)
    {
        // Inpainting
        for (int a = 0; a < A; a++)
        {
            IxIy_bert = bertalmioParts.gradient(I_bert);

            qDebug() << IxIy_bert.r[1][9].y;
            qDebug() << IxIy_bert.g[1][9].y;
            qDebug() << IxIy_bert.b[1][9].y;
        }

        // Diffusion
        for (int b = 0; b < B; b++)
        {

        }
    }

    return a.exec();
}
